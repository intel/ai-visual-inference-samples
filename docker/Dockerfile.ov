# Fixed Function Preprocessing (FF Preproc)
# This feature requires cartwheel-based FFmpeg
# Possible values:
#   - 0 (default): FF preproc is DISABLED
#   - 1: FF preproc is ENABLED
ARG FF_PREPROC=0

FROM ubuntu:22.04 as ffmpeg-build-base

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends --fix-missing \
    ca-certificates curl build-essential gpg-agent software-properties-common yasm unzip wget pkg-config git && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Add Intel® Graphics APT repository
ARG INTEL_GFX_KEY_URL=https://repositories.intel.com/gpu/intel-graphics.key
ARG INTEL_GFX_APT_REPO="deb https://repositories.intel.com/gpu/ubuntu jammy unified"

RUN repo="$INTEL_GFX_APT_REPO" && \
    if [ -n "$INTEL_GFX_KEY_URL" ]; then \
    key=/usr/share/keyrings/intel-graphics.gpg && \
    curl -fsSL $INTEL_GFX_KEY_URL | gpg --dearmor --output $key && \
    repo=${repo//deb /deb [signed-by=$key] }; \
    fi && \
    echo "$repo" > /etc/apt/sources.list.d/intel-gpu-jammy.list

RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends --fix-missing \
    libdrm-dev libva-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /build

#
# Stable FFmpeg -- without FF Preproc (see above)
#
FROM ffmpeg-build-base as ffmpeg-ff-preproc-0
ARG FFMPEG_VER=n6.1
RUN curl -GOLf "https://github.com/FFmpeg/FFmpeg/archive/refs/tags/${FFMPEG_VER}.zip" && \
    unzip -q "${FFMPEG_VER}.zip" && \
    rm "${FFMPEG_VER}.zip" && \
    mv ./* ffmpeg

WORKDIR /build/ffmpeg/

RUN ./configure --enable-shared --enable-vaapi --enable-pic && \
    make "-j$(nproc)" && \
    make install DESTDIR=/build/ffmpeg/ffmpeg-install

#
# Cartwheel-based FFmpeg -- WITH FF Preproc (see above)
#
FROM ffmpeg-build-base as ffmpeg-ff-preproc-1
ARG FFMPEG_VER=2024q1
RUN git clone -b "$FFMPEG_VER" "https://github.com/intel/cartwheel-ffmpeg" --depth 1 --recurse-submodules ffmpeg

WORKDIR /build/ffmpeg/ffmpeg

RUN git apply ../patches/*.patch

RUN ./configure --enable-shared --enable-vaapi --enable-pic && \
    make "-j$(nproc)" && \
    make install DESTDIR=/build/ffmpeg/ffmpeg-install

# hadolint ignore=DL3006
FROM ffmpeg-ff-preproc-${FF_PREPROC} as ffmpeg-build

FROM openvino/ubuntu22_runtime:2024.1.0 as ov-prepare
USER root
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends --fix-missing \
    ca-certificates tzdata curl g++ gcc libc6-dev cmake make python3-dev nano git git-lfs gpg-agent software-properties-common libopencv-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Add Intel® Graphics APT repository
ARG INTEL_GFX_KEY_URL=https://repositories.intel.com/gpu/intel-graphics.key
ARG INTEL_GFX_APT_REPO="deb https://repositories.intel.com/gpu/ubuntu jammy unified"

RUN repo="$INTEL_GFX_APT_REPO" && \
    if [ -n "$INTEL_GFX_KEY_URL" ]; then \
    key=/usr/share/keyrings/intel-graphics.gpg && \
    curl -fsSL $INTEL_GFX_KEY_URL | gpg --dearmor --output $key && \
    repo=${repo//deb /deb [signed-by=$key] }; \
    fi && \
    echo "$repo" > /etc/apt/sources.list.d/intel-gpu-jammy.list

## Install Media packages
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends --fix-missing \
    intel-opencl-icd \
    intel-level-zero-gpu \
    level-zero \
    level-zero-dev \
    intel-media-va-driver-non-free \
    va-driver-all vainfo hwinfo clinfo libdrm-dev libva-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# So hadolint is happy
USER openvino



FROM ov-prepare as final
ARG FF_PREPROC
USER root
COPY --from=ffmpeg-build /build/ffmpeg/ffmpeg-install /

RUN ldconfig
USER openvino
ARG MADIR=/home/openvino/ma
RUN mkdir -p "$MADIR/install"
WORKDIR $MADIR/install

COPY --chown=openvino:openvino ./requirements-base.txt ./
COPY --chown=openvino:openvino ./requirements-ov.txt ./

# Build VideoReader
ENV VISUAL_AI_ENABLE_FF_PREPROC=${FF_PREPROC}
RUN pip install --no-cache-dir -r ./requirements-ov.txt

COPY --chown=openvino:openvino ./setup.py ./
COPY --chown=openvino:openvino ./src ./src
COPY --chown=openvino:openvino ./external ./external

RUN pip install --no-cache-dir .

WORKDIR $MADIR
COPY --chown=openvino:openvino ./data ./data
COPY --chown=openvino:openvino ./samples ./samples
COPY --chown=openvino:openvino ./docker/third-party-programs-ov.txt ./

# Clean up and rights
RUN rm -rf $MADIR/install
